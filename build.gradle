buildscript {
    ext {
        springBootVersion = "2.2.1.RELEASE"
    }

    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}",
        )
    }
}


/* 所有子项目的通用配置 */
subprojects {


    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group 'org.young'
    version '1.0.0-SNAPSHOT'

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    configurations.all {

        //每隔24小时检查远程依赖是否存在更新
        //resolutionStrategy.cacheChangingModulesFor 24, 'hours'
        //每隔10分钟..
        resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
        // 采用动态版本声明的依赖缓存10分钟
        resolutionStrategy.cacheDynamicVersionsFor 10 * 60, 'seconds'


    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.RELEASE"
        }
    }

    ext {
        springCloudVersion = "2.2.0.RELEASE"
        junitVersion = "5.2.0"
    }

    dependencies {

        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"

        implementation(
                'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server',
                'com.google.code.gson:gson:2.8.6'
        )

        testImplementation(
                "org.junit.jupiter:junit-jupiter-engine"
        )

    }

    test {
        useJUnitPlatform()
    }

}


